#!/usr/bin/env python
import pathlib
import subprocess
import sys

formatted_files = ['.cpp', '.h', '.hpp']
formatting_cmd = "clang-format -style=file -i"

path_file = pathlib.Path(__file__).absolute()
path_hooks = path_file.parent
path_root = path_hooks.parent.parent

# Get all files that have registered changes in this commit.
cmd_git_diff = subprocess.Popen("git diff --name-only --cached", shell=True, stdout=subprocess.PIPE, cwd=path_root)
cmd_git_diff.wait()

# Remove the end of line characters from all file paths.
output = cmd_git_diff.stdout.readlines()
output = [path_root.joinpath(line.decode('utf-8').rstrip()) for line in output]

# Filter all files by their extension and remove anything but header and source file.
targets: [pathlib.Path] = filter(lambda f: f.exists() and f.is_file(), output)
targets: [pathlib.Path] = filter(lambda f: f.suffix in formatted_files, targets)

# Invoke clang format.py on all files that are supposed to be formatted.
for target in targets:
    print("> Formatting file '{}'".format(target.relative_to(path_root)))
    sys.stdout.flush()

    format_cmd = subprocess.Popen("{} {}".format(formatting_cmd, target.absolute()), shell=True, stderr=subprocess.PIPE)
    format_cmd.wait()

    # Check if formatting failed, and if so, abort the commit immediately and forward
    # the format.py output to the console. This allows users to fix this themselves if so desired.
    if format_cmd.returncode != 0:
        print("! Error: Formatting failed.", file=sys.stderr)
        print("! File: '{}' couldn't be formatted.".format(target.relative_to(path_root)), file=sys.stderr)
        print(file=sys.stderr)

        # Get all output from the standard error pipe from the formatting command, decode the byte-strings into utf-8
        # and redirect them to the pre-commit standard error before aborting with exit status 1.
        format_output = format_cmd.stderr.readlines()
        format_output = map(lambda line: line.decode('utf-8'), format_output)
        for line in format_output:
            print("   ! {}".format(line), file=sys.stderr, end='')
        sys.exit(1)
    else:
        # Everything went fine with this file, add it to the change set again.
        git_add = subprocess.Popen("git add {}".format(target.absolute()), shell=True)
        git_add.wait()

sys.exit(0)
